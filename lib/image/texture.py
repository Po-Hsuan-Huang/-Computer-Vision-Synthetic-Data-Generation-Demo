#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 13 16:11:16 2017

@author: po-hsuan
"""


from PIL import Image, ImageDraw, ImageChops
import numpy as np
import os
import glob
import random

def draw_shade(img, mode):
    pass
    
#if __name__ == '__main__':
    '''
    The function paste texture onto the imput PIL image by adding alpha 
    value map from gray scale texture images stored in the directories specified
    in each texture mode. The darkness of texture can be cumstomerized dregarding 
    the needs. 
    
    It can be applied to marathon name tags, car plates, etc.
    
    mode : crumple, heavy crumple, stain, spray, scratch, fabric.
    
    Additional modes can be generated by users via file gen_texture_grayscale.py
        
    return : a PIL image after texure processing.
    '''
    
    temp = img
     
    this_dir = os.path.dirname(__file__) 
#    temp = Image.open('./templates/06p.png')
    
#    mode= 'scratch'
    
    if mode == 'crumple':
            crumple_textures = glob.glob( this_dir + '/alpha_texture/crumple/*crumple*.*')
            textureName = random.sample(crumple_textures,1)[0]
            darkness = -0
    if mode == 'heavy_crumple':
            crumple_textures = glob.glob(this_dir + '/alpha_texture/crumple/heavy_crumple/*crumple*.*')
            textureName = random.sample(crumple_textures,1)[0]
            darkness = -60
            
    if mode == 'stain':
            stain_textures = glob.glob(this_dir + '/alpha_texture/stain/*stain*.*')
#           stain_textures = glob.glob('./alpha_texture/*stain*.*')
            textureName = random.sample(stain_textures,1)[0]
            darkness = -10      
    if mode == 'spray':
            spray_textures = glob.glob( this_dir + '/alpha_texture/spray/*spray*.*')
            textureName = random.sample(spray_textures,1)[0]
            darkness = -10
    if mode == 'scratch':
            scratch_textures = glob.glob(this_dir + '/alpha_texture/scratch/*scratch*.*')
            textureName = random.sample(scratch_textures,1)[0]
            darkness= -60
    if mode == 'fabric':
            fabric_textures = glob.glob(this_dir + '/alpha_texture/fabric/*fabric*.*')
            textureName = random.sample(fabric_textures,1)[0]
            darkness= -50
            
    texture = Image.open(textureName)
    
    # In case the texture is not grayscale
    if texture.mode != 'L':
        texture = texture.convert('L')
        
    texture_w , texture_h = texture.size
    
    # select random location to crop the alpha patch
    temp_w , temp_h = temp.size
    pos_x = random.randint(0, texture_w - temp_w)
    pos_y = random.randint(0, texture_h - temp_h)
    box = (pos_x, pos_y, pos_x + temp_w, pos_y + temp_h)
    texture = texture.crop(box)
    # create black image, apply gradient
    mask = Image.new('RGBA', temp.size, color= 0) # i.e. black
    mask.putalpha(texture)
    # scale the darkness of the blakc gradient by offseting alpha value.
    whiten = Image.new('RGBA', temp.size, color= 1)
    mask = ImageChops.add(whiten, mask, scale=2., offset = darkness)
    output_img = Image.alpha_composite(temp, mask)
#    output_img.show()
    return output_img